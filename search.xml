<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Luogu P3128 解题报告]]></title>
      <url>/2017/11/29/Luogu%20P3128%20%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/index/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://www.luogu.org/problemnew/show/3128" target="_blank" rel="noopener">题目</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>给出一棵树，每个给出的点对之间的简单路径上的点权加1。</p>
<p>求点权的最大值。</p>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>考虑树上查分+Lca。</p>
<p>每组点对间的简单路径可以分为一个点到Lca，再到另一个点。</p>
<p>将给出的点对的点权都加1。</p>
<p>因为做树上前缀和时，Lca处会被计算两次，所以Lca的点权-1。</p>
<p>因为路径不包含Lca的祖先，所以Lca的父亲的点权-1。</p>
<p>最后做一遍Dfs即可计算出答案。</p>
<p>代码使用了Tarjan求Lca的方法。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> to first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> next second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, en, qn, cnt, now, x, y;</span><br><span class="line"><span class="keyword">int</span> head[N], qead[N], f[N], w[N], fa[N], s[N], num[M &lt;&lt; <span class="number">1</span>], ans[M];</span><br><span class="line">pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; e[N &lt;&lt; <span class="number">1</span>], q[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) ch = getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line">        now = (now &lt;&lt; <span class="number">1</span>) + (now &lt;&lt; <span class="number">3</span>) + ch -<span class="string">'0'</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++en].to = v;</span><br><span class="line">    e[en].next = head[u];</span><br><span class="line">    head[u] = en;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addq</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q[++qn].to = v;</span><br><span class="line">    num[qn] = f;</span><br><span class="line">    q[qn].next = qead[u];</span><br><span class="line">    qead[u] = qn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] == x ? fa[x] : fa[x] = find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx = find(x);</span><br><span class="line">    <span class="keyword">int</span> fy = find(y);</span><br><span class="line">    fa[fy] = fx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = e[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i].to == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(e[i].to, x);</span><br><span class="line">    	s[x] += s[e[i].to];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = max(cnt, s[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = e[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[e[i].to]) <span class="keyword">continue</span>;</span><br><span class="line">        f[e[i].to] = x;</span><br><span class="line">        Tarjan(e[i].to);</span><br><span class="line">        merge(x, e[i].to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = qead[x]; i; i = q[i].next)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[q[i].to]) ans[num[i]] = find(q[i].to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = get_num(), k = get_num();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        x = get_num(), y = get_num();</span><br><span class="line">        adde(x, y), adde(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">        x = get_num(), y = get_num();</span><br><span class="line">        ++s[x], ++s[y];</span><br><span class="line">        addq(x, y, i), addq(y, x, i);</span><br><span class="line">    &#125;</span><br><span class="line">    Tarjan(<span class="number">1</span>);</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)&#123;</span><br><span class="line">        --s[ans[i]];</span><br><span class="line">        --s[f[ans[i]]];</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><ul>
<li><p>注意更新前缀和数组与Dfs的顺序</p>
</li>
<li><p>注意数组的大小问题</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 解题报告 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Lca </tag>
            
            <tag> 差分 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Luogu P2087 解题报告]]></title>
      <url>/2017/11/28/Luogu%20P2087%20%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/index/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://www.luogu.org/problemnew/show/2087" target="_blank" rel="noopener">题目</a></h1><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><p>你需要维护m个集合，q次操作。</p>
<p>初始时，集合1中有n个正整数，分别为1到n。</p>
<p>每次你需要从集合中删除一个数，并将其加到另一个集合中。</p>
<p>询问区间[l, r]中，所有没出现过的集合中元素的数量之和。</p>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>集合是可以用异或运算，那么就可以对每个集合进行Hash，然后快速找到[l, r]中没有出现的集合，计算答案。</p>
<p>这里用到了STL中的Map和Set。</p>
<p>小技巧：</p>
<ul>
<li><p>采用<code>unsigned long long</code>来Hash，防止Hash冲突</p>
</li>
<li><p>采用妹子的生日和你的生日作为随机种子，RP++</p>
</li>
<li><p>每次先把要改变的两个集合从set中删除，然后运算结束后再加入set中，每次添加前都要检查是否出现过。</p>
</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, q, x, y;</span><br><span class="line"><span class="keyword">char</span> opt;</span><br><span class="line"><span class="keyword">int</span> pos[N], num[N];</span><br><span class="line">ULL id[N], sq[N];</span><br><span class="line"><span class="built_in">map</span>&lt;ULL, <span class="keyword">bool</span>&gt;p;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    srand(<span class="number">2001</span>+<span class="number">9</span>+<span class="number">5</span>+<span class="number">2001</span>+<span class="number">1</span>+<span class="number">30</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        id[i] = (rand() &lt;&lt; <span class="number">16</span> | rand());</span><br><span class="line">        sq[<span class="number">1</span>] ^= id[i];</span><br><span class="line">        pos[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num[<span class="number">1</span>] = n;</span><br><span class="line">    s.insert(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="string">'C'</span>)&#123;</span><br><span class="line">        	it = s.find(pos[x]);</span><br><span class="line">        	<span class="keyword">if</span>(*it == pos[x]) s.erase(pos[x]);</span><br><span class="line">        	it = s.find(y);</span><br><span class="line">        	<span class="keyword">if</span>(*it == y) s.erase(y);</span><br><span class="line">            sq[pos[x]] ^= id[x];</span><br><span class="line">            --num[pos[x]];</span><br><span class="line">            sq[y] ^= id[x];</span><br><span class="line">            ++num[y];</span><br><span class="line">            <span class="keyword">if</span>(p[sq[pos[x]]] == <span class="literal">false</span>) s.insert(pos[x]);</span><br><span class="line">            <span class="keyword">if</span>(p[sq[y]] == <span class="literal">false</span>)  s.insert(y);</span><br><span class="line">            pos[x] = y;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ULL ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(it = s.lower_bound(x); it != s.end() &amp;&amp; *it &lt;= y; it = s.upper_bound(*it))&#123;</span><br><span class="line">                ans += num[*it];</span><br><span class="line">                p[sq[*it]] = <span class="literal">true</span>;</span><br><span class="line">                s.erase(it);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 解题报告 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hash </tag>
            
            <tag> STL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NOIP2017游记]]></title>
      <url>/2017/11/28/NOIP2017%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/index/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>或许是最后一场NOIP了，要努力啊…</p>
<a id="more"></a>
<h1 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h1><p>上午坐车前往日照一中，竟然是前几批到的…</p>
<p>抽到了曲师大14考场55号位，同校liutao大佬居然跟我一个考场，瞬间RP++。</p>
<p>又在1号楼住宿，食堂的伙食与去年基本一样，无法细细评价…</p>
<p>下午在宿舍里闷声睡大觉，养精蓄锐。</p>
<p>这场NOIP，至关重要。</p>
<p>PS：这么重要你晚上还玩狼人杀…</p>
<p>晚上去试机，机房配置不知道比我们学校机房高多少。酷睿i7，内存8GB，显卡貌似是GT770…</p>
<p>这配置让我兴奋了半晚上…</p>
<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><p>早上按时起床，一切井然有序。</p>
<p>除了班车号有点乱…</p>
<p>压缩文件的解压密码为不忘初心。</p>
<p>总览Day1试题，发现比去年简单不少。</p>
<p>进入状态有点慢，用了十几分钟才决定要写第一题…</p>
<p>看了题目给的两个样例，首先发现了一个错误的规律<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo>(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>)</mo><mo>∗</mo><mn>2</mn><mo>−</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo>(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">max(a,b)*2-min(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit">m</span><span class="mord mathit">a</span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathit">a</span><span class="mpunct">,</span><span class="mord mathit">b</span><span class="mclose">)</span><span class="mbin">∗</span><span class="mord mathrm">2</span><span class="mbin">−</span><span class="mord mathit">m</span><span class="mord mathit">i</span><span class="mord mathit">n</span><span class="mopen">(</span><span class="mord mathit">a</span><span class="mpunct">,</span><span class="mord mathit">b</span><span class="mclose">)</span></span></span></span>，令人兴奋地是居然过了全部的两个样例！</p>
<p>以为RP不错，看还有时间，就写了对拍，放一边慢慢拍去了（其实对拍的数据生成器是错误的，我只生成了质数，暴力也有一点问题，这些都是之后才发现的）。</p>
<p>发现T2是个大模拟，于是就扔了一边不管，先去写T3了。</p>
<p>以为T3可以用Spfa来做DP，美滋滋能得到70分，就随便写了写。</p>
<p>期间发现Day1的规律有误，随便猜了个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>∗</mo><mi>b</mi><mo>−</mo><mi>a</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a*b-a-b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">a</span><span class="mbin">∗</span><span class="mord mathit">b</span><span class="mbin">−</span><span class="mord mathit">a</span><span class="mbin">−</span><span class="mord mathit">b</span></span></span></span>，发现恰好符合，又查出暴力有点小问题，心中庆幸写了对拍，并且拍出错误了。</p>
<p>剩下的时间就一直重构T2，大约重构了3遍，重构成功了。</p>
<p>这时时间就已经接近结束了，检查了几遍文件名和输入输出，便忐忑的走出了考场。</p>
<p>回日照一中的班车上与liutao谈笑风生，发现T1的公式证明起来很麻烦，但猜规律却很简单。T2有好多好多特殊情况，幸亏大样例比较良心，基本都考虑到了。T3，就不说了，炸了。</p>
<p>Day1期望得分100 + 100 + 0 = 200</p>
<p>Day1实际得分100 + 100 + 10 = 210</p>
<h1 id="Day1-5"><a href="#Day1-5" class="headerlink" title="Day1.5"></a>Day1.5</h1><p>下午liutao跟Cy大佬一起去找老师充电，我则跟Pb大佬在宿舍睡了一下午。</p>
<p>晚上又玩了一晚上狼人杀…</p>
<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><p>这一天的解压密码为AlphaGo。</p>
<p>Day2的题目就跟Day1不一样了，一看就比较正规…</p>
<p>T1一眼看出搜索，于是就随便搜了搜，用30分钟左右写完。</p>
<p>T2的题意理解了一会儿，瞬间想到一个贪心：枚举第一个加的点，然后类似于Prim的方法进行扩展。时间复杂度显然不对，也没想那么多。大样例居然过了！！！</p>
<p>T3直接没考虑100%，采用了打分段程序的方法。</p>
<p>前30%的数据，直接模拟。中间20%的数据，发现可以用vector做，然而居然忘记了vector怎么用了…</p>
<p>还有30%的数据，x=1。</p>
<p>考虑用树状数组维护每个树节点前面有多少个空位置，然后二分一个合法的位置即可，时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msup><mi>g</mi><mn>2</mn></msup><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlog^2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8141079999999999em;"></span><span class="strut bottom" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord"><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="vlist"><span style="top:-0.363em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord mathit">n</span><span class="mclose">)</span></span></span></span>。</p>
<p>Day2结束比较早，感觉没啥不对的，于是就欢快的玩起了扫雷……</p>
<p>结束后，继续跟liutao谈笑风生，发现T2，T3貌似都有些大大小小的问题。</p>
<p>Day2期望得分100 + 40 + 30 = 170</p>
<p>Day2实际得分100 + 40 + 60 = 200</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Noip2017期望得分100 + 100 + 0 + 100 + 40 + 30 = 370</p>
<p>Noip2017实际得分100 + 100 + 10 + 100 + 40 + 60 = 410</p>
<ul>
<li><p>对动态规划的理解和应用还有待提高</p>
</li>
<li><p>对题目的敏感程度不高</p>
</li>
</ul>
<p>下次比赛，继续努力啊！</p>
]]></content>
      
        <categories>
            
            <category> 游记 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Blog Started!]]></title>
      <url>/2017/11/27/Blog-Started/index/</url>
      <content type="html"><![CDATA[<h1 id="写在博客前面"><a href="#写在博客前面" class="headerlink" title="写在博客前面"></a>写在博客前面</h1><p>新博客开坑啦，一定要坚持写下去哦！</p>
<p>欢迎交换友链，一起努力吧！</p>
<p><strong>Let life be beautiful like summer flowers and death like autumn leaves!</strong></p>
]]></content>
      
        <categories>
            
            <category> Daily Life </category>
            
        </categories>
        
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[About]]></title>
      <url>/About/index.html</url>
      <content type="html"><![CDATA[<p>昵称：Johnson</p>
<p>性别：男孩子</p>
<p>坐标：SD</p>
<p>一句话简介：不想退役的OIer</p>
<p>简介：正在向省选前进！</p>
]]></content>
    </entry>
    
  
</search>
